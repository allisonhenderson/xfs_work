#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2021, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test 542
#
# Log attribute replay test
#
. ./common/preamble
_begin_fstest auto quick attr

# get standard environment, filters and checks
. ./common/filter
. ./common/attr
. ./common/inject

_cleanup()
{
	echo "*** unmount"
	_scratch_unmount 2>/dev/null
	rm -f $tmp.*
	echo 0 > /sys/fs/xfs/debug/larp
}

_test_attr_replay()
{
	testfile=$SCRATCH_MNT/$1
	attr_name=$2
	attr_value=$3
	flag=$4
	error=$5

	# Inject error
	_scratch_inject_error $error

	# Set attribute
	echo "$attr_value" | ${ATTR_PROG} -$flag "$attr_name" $testfile 2>&1 | \
			    _filter_scratch

	# FS should be shut down, touch will fail
	touch $testfile 2>&1 | _filter_scratch

	# Remount to replay log
	_scratch_remount_dump_log >> $seqres.full

	# FS should be online, touch should succeed
	touch $testfile

	# Verify attr recovery"
	$ATTR_PROG -g $attr_name $testfile | md5sum

	echo ""
}

_create_test_file()
{
	filename=$1
	count=$2
	attr_value=$3

	touch $SCRATCH_MNT/$filename

	for i in `seq $count`
	do
		$ATTR_PROG -s "attr_name$i" -V $attr_value \
			$SCRATCH_MNT/$filename >> $seqres.full
	done
}

# real QA test starts here
_supported_fs xfs

_require_scratch
_require_attrs
_require_xfs_io_error_injection "larp"
_require_xfs_io_error_injection "leaf_split"
_require_xfs_io_error_injection "leaf_to_node"
_require_xfs_sysfs debug/larp

# turn on log attributes
echo 1 > /sys/fs/xfs/debug/larp

_scratch_unmount >/dev/null 2>&1

attr16="0123456789ABCDEF"
attr64="$attr16$attr16$attr16$attr16"
attr256="$attr64$attr64$attr64$attr64"
attr1k="$attr256$attr256$attr256$attr256"
attr4k="$attr1k$attr1k$attr1k$attr1k"
attr8k="$attr4k$attr4k"
attr16k="$attr8k$attr8k"
attr32k="$attr16k$attr16k"
attr64k="$attr32k$attr32k"

echo "*** mkfs"
_scratch_mkfs_xfs >/dev/null

echo "*** mount FS"
_scratch_mount

# empty, inline
_create_test_file empty_file1 0
_test_attr_replay empty_file1 "attr_name" $attr64 "s" "larp"
_test_attr_replay empty_file1 "attr_name" $attr64 "r" "larp"

# empty, interal
_create_test_file empty_file2 0
_test_attr_replay empty_file2 "attr_name" $attr1k "s" "larp"
_test_attr_replay empty_file2 "attr_name" $attr1k "r" "larp"

# empty, remote
_create_test_file empty_file3 0
_test_attr_replay empty_file3 "attr_name" $attr64k "s" "larp"
_test_attr_replay empty_file3 "attr_name" $attr64k "r" "larp"

# inline, inline
_create_test_file inline_file1 1 $attr16
_test_attr_replay inline_file1 "attr_name2" $attr64 "s" "larp"
_test_attr_replay inline_file1 "attr_name2" $attr64 "r" "larp"

# inline, internal
_create_test_file inline_file2 1 $attr16
_test_attr_replay inline_file2 "attr_name2" $attr1k "s" "larp"
_test_attr_replay inline_file2 "attr_name2" $attr1k "r" "larp"

# inline, remote
_create_test_file inline_file3 1 $attr16
_test_attr_replay inline_file3 "attr_name2" $attr64k "s" "larp"
_test_attr_replay inline_file3 "attr_name2" $attr64k "r" "larp"

# extent, internal
_create_test_file extent_file1 1 $attr1k
_test_attr_replay extent_file1 "attr_name2" $attr1k "s" "larp"
_test_attr_replay extent_file1 "attr_name2" $attr1k "r" "larp"

# extent, inject error on split
_create_test_file extent_file2 3 $attr1k
_test_attr_replay extent_file2 "attr_name4" $attr1k "s" "leaf_split"

# extent, inject error on fork transition
_create_test_file extent_file3 3 $attr1k
_test_attr_replay extent_file3 "attr_name4" $attr1k "s" "leaf_to_node"

# extent, remote
_create_test_file extent_file4 1 $attr1k
_test_attr_replay extent_file4 "attr_name2" $attr64k "s" "larp"
_test_attr_replay extent_file4 "attr_name2" $attr64k "r" "larp"

# remote, internal
_create_test_file remote_file1 1 $attr64k
_test_attr_replay remote_file1 "attr_name2" $attr1k "s" "larp"
_test_attr_replay remote_file1 "attr_name2" $attr1k "r" "larp"

# remote, remote
_create_test_file remote_file2 1 $attr64k
_test_attr_replay remote_file2 "attr_name2" $attr64k "s" "larp"
_test_attr_replay remote_file2 "attr_name2" $attr64k "r" "larp"

# replace shortform
_create_test_file sf_file 2 $attr64
_test_attr_replay sf_file "attr_name2" $attr64 "s" "larp"

# replace leaf
_create_test_file leaf_file 2 $attr1k
_test_attr_replay leaf_file "attr_name2" $attr1k "s" "larp"

# replace node
_create_test_file node_file 1 $attr64k
$ATTR_PROG -s "attr_name2" -V $attr1k $SCRATCH_MNT/node_file \
		>> $seqres.full
_test_attr_replay node_file "attr_name2" $attr1k "s" "larp"

echo "*** done"
status=0
exit
