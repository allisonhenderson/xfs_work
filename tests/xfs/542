#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2021, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test 542
#
# multi link parent pointer test
#
. ./common/preamble
_begin_fstest auto quick parent

cleanup()
{
	cd /
	rm -f $tmp.*
	echo 0 > /sys/fs/xfs/debug/larp
}

filter_dbval()
{
	awk '{ print $4 }'
}

full()
{
    echo ""            >>$seqres.full
    echo "*** $* ***"  >>$seqres.full
    echo ""            >>$seqres.full
}

# get standard environment, filters and checks
. ./common/filter
. ./common/reflink
. ./common/inject
. ./common/parent

# remove previous $seqres.full before test
rm -f $seqres.full

# Modify as appropriate
_supported_fs xfs
_require_scratch
_require_xfs_io_error_injection "larp"
_require_xfs_sysfs debug/larp

echo 1 > /sys/fs/xfs/debug/larp

# real QA test starts here

# Create a directory tree using a protofile and
# make sure all inodes created have parent pointers

protofile=$tmp.proto

cat >$protofile <<EOF
DUMMY1
0 0
: root directory
d--777 3 1
: a directory
testfolder1 d--755 3 1
file1 ---755 3 1 /dev/null
$
: back in the root
testfolder2 d--755 3 1
file2 ---755 3 1 /dev/null
: done
$
EOF

if [ $? -ne 0 ]
then
    _fail "failed to create test protofile"
fi

echo "*** create FS"

rm -f $seqres.full
_scratch_unmount >/dev/null 2>&1

_scratch_mkfs_xfs -f -n parent=1 -p $protofile >>$seqresres.full 2>&1 \
	|| _fail "mkfs failed"
echo "*** check FS"
_check_scratch_fs

echo "*** mount FS"
full " mount"
_scratch_mount >>$seqres.full 2>&1 \
	|| _fail "mount failed"

testfolder1="testfolder1"
testfolder2="testfolder2"
file1="file1"
file2="file2"
file3="file3"
file4="file4"
file5="file5"
file1_ln="file1_link"

echo ""
echo "Multi link parent pointer test"
NLINKS=100
touch $SCRATCH_MNT/$testfolder1/$file1
for (( j=0; j<$NLINKS; j++ )); do
	ln $SCRATCH_MNT/$testfolder1/$file1 $SCRATCH_MNT/$testfolder1/$file1_ln.$j
	_verify_parent    "$testfolder1" "$file1_ln.$j"    "$testfolder1/$file1"
	_verify_parent    "$testfolder1" "$file1"          "$testfolder1/$file1_ln.$j"
done
echo "Multi unlink parent pointer test"
for (( j=$NLINKS-1; j<=0; j-- )); do
	ino="$(stat -c '%i' $SCRATCH_MNT/$testfolder1/$file1_ln.$j)"
	rm $SCRATCH_MNT/$testfolder1/$file1_ln.$j
	_verify_no_parent "$file1_ln.$j" "$ino" "$testfolder1/$file1"
done

echo "*** unmount FS"
full "umount"
_scratch_unmount >>$seqres.full 2>&1 \
	|| _fail "umount failed"


echo "*** done"
rm $seqres.full
status=0

# success, all done
status=0
exit
