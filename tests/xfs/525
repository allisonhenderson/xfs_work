#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2021, Oracle and/or its affiliates.  All Rights Reserved.
#
# FS QA Test No. 525
#
# parent pointer inject test
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
seqfull="$seqres.full"
status=1	# failure is the default!
trap "cleanup; exit \$status" 0 1 2 3 15

cleanup()
{
	cd /
	rm -f $tmp.*
}

filter_dbval()
{
	awk '{ print $4 }'
}

full()
{
    echo ""            >>$seqfull
    echo "*** $* ***"  >>$seqfull
    echo ""            >>$seqfull
}

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/reflink
. ./common/inject
. ./common/parent

# remove previous $seqres.full before test
rm -f $seqres.full

# Modify as appropriate
_supported_fs xfs
_require_scratch
_require_xfs_io_error_injection "delayed_attr"

MOUNT_OPTIONS="-o delattr"

# real QA test starts here

# Create a directory tree using a protofile and
# make sure all inodes created have parent pointers

protofile=$tmp.proto

cat >$protofile <<EOF
DUMMY1
0 0
: root directory
d--777 3 1
: a directory
testfolder1 d--755 3 1
file1 ---755 3 1 /dev/null
$
: back in the root
testfolder2 d--755 3 1
file2 ---755 3 1 /dev/null
: done
$
EOF

if [ $? -ne 0 ]
then
    _fail "failed to create test protofile"
fi

echo "*** create FS"

rm -f $seqfull
_scratch_unmount >/dev/null 2>&1

_scratch_mkfs_xfs -f -n parent=1 -p $protofile >>$seqfull 2>&1 \
	|| _fail "mkfs failed"
echo "*** check FS"
_check_scratch_fs

echo "*** mount FS"
full " mount"
_scratch_mount >>$seqfull 2>&1 \
	|| _fail "mount failed"

testfolder1="testfolder1"
testfolder2="testfolder2"
file1="file1"
file2="file2"
file3="file3"
file4="file4"
file5="file5"
file1_ln="file1_link"

echo ""
echo "Error inject test"

echo "Create files"
touch $SCRATCH_MNT/$testfolder1/$file4
_verify_parent    "$testfolder1" "$file4" "$testfolder1/$file4"

echo "Inject error"
_scratch_inject_error "delayed_attr"

echo "Move files"
mv $SCRATCH_MNT/$testfolder1/$file4 $SCRATCH_MNT/$testfolder2/$file5

echo "FS should be shut down, touch will fail"
touch $SCRATCH_MNT/$testfolder2/$file5 2>&1 | _filter_scratch

echo "Remount to replay log"
_scratch_inject_logprint >> $seqres.full

echo "FS should be online, touch should succeed"
touch $SCRATCH_MNT/$testfolder2/$file5

echo "Check files again"
_verify_parent    "$testfolder2" "$file5" "$testfolder2/$file5"

echo "*** unmount FS"
full "umount"
_scratch_unmount >>$seqfull 2>&1 \
	|| _fail "umount failed"


echo "*** done"
rm $seqfull
status=0

# success, all done
status=0
exit
